# Runtime module library
add_library(dsd-neo_runtime)

target_sources(dsd-neo_runtime PRIVATE
  config.cpp
  log.cpp
  mem.cpp
  ring.cpp
  input_ring.cpp
  worker_pool.cpp
  rt_sched.cpp
  unicode.cpp
  ${CMAKE_CURRENT_BINARY_DIR}/version/git_ver.c
)

# Generate git version source within this target's build dir
file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/version)
configure_file(
  ${PROJECT_SOURCE_DIR}/src/runtime/version/git_ver.c.in
  ${CMAKE_CURRENT_BINARY_DIR}/version/git_ver.c
  @ONLY)

target_include_directories(dsd-neo_runtime
  PUBLIC ${PROJECT_SOURCE_DIR}/include
  PRIVATE ${_PUBLIC_INCLUDES}
)

# Warnings (configurable)
if(DSD_ENABLE_WARNINGS)
    if(CMAKE_C_COMPILER_ID MATCHES "Clang|GNU")
        target_compile_options(dsd-neo_runtime PRIVATE -Wall -Wextra -Wpedantic)
    elseif(MSVC)
        target_compile_options(dsd-neo_runtime PRIVATE /W4)
    endif()
    target_compile_options(dsd-neo_runtime PRIVATE -Wunused-but-set-variable -Wunused-variable -Wunused-parameter
                           -Wempty-body -Wunused-label $<$<COMPILE_LANGUAGE:C>:-Wpointer-sign>
                           -Wmisleading-indentation -Wparentheses -Wunused-value -Wreturn-type
                           -Wtautological-compare)
    if(DSD_WARNINGS_AS_ERRORS)
        if(CMAKE_C_COMPILER_ID MATCHES "Clang|GNU")
            target_compile_options(dsd-neo_runtime PRIVATE -Werror)
        elseif(MSVC)
            target_compile_options(dsd-neo_runtime PRIVATE /WX)
        endif()
    endif()
endif()
