name: windows-cygwin-portable

on:
  workflow_dispatch: {}
  push:
    tags:
      - "v*"

jobs:
  build-portable-zip:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Gate on CI success (ci.yml) [disabled]
        if: ${{ false }}
        uses: actions/github-script@v8
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const sha = context.sha;
            // Check latest run of the Linux CI workflow for this commit
            const res = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: 'ci.yml',
              head_sha: sha,
              per_page: 1
            });
            const run = res.data.workflow_runs[0];
            if (!run) {
              core.setFailed(`No CI (ci.yml) run found for commit ${sha}.`);
            } else if (run.status !== 'completed' || run.conclusion !== 'success') {
              core.setFailed(`CI (ci.yml) not successful for ${sha}. status=${run.status} conclusion=${run.conclusion}`);
            } else {
              core.info(`CI passed: ${run.html_url}`);
            }

      - name: Compute dependency SHAs
        id: dep-shas
        shell: pwsh
        run: |
          $mbe = (git ls-remote https://github.com/arancormonk/mbelib-neo HEAD).Split("`t")[0]
          $codec2 = (git ls-remote https://github.com/arancormonk/codec2 HEAD).Split("`t")[0]
          $itpp = (git ls-remote https://github.com/arancormonk/itpp HEAD).Split("`t")[0]
          $rtlsdr = (git ls-remote https://github.com/arancormonk/rtl-sdr HEAD).Split("`t")[0]
          "mbe_sha=$mbe" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "codec2_sha=$codec2" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "itpp_sha=$itpp" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "rtlsdr_sha=$rtlsdr" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Setup Cygwin
        uses: egor-tensin/setup-cygwin@v4.0.1
        with:
          platform: x64
          packages: >-
            git
            gcc-g++
            make
            cmake
            curl
            ninja
            pkg-config
            libsndfile-devel
            ncursesw-devel
            libpulse-devel
            pulseaudio
            pulseaudio-utils
            libusb1.0-devel
            mintty

      - name: Mark repo safe for Cygwin git
        shell: pwsh
        run: C:\\tools\\cygwin\\bin\\bash.exe -lc 'git config --global --add safe.directory "$(cygpath -u "$GITHUB_WORKSPACE")"'

      - name: Restore cygdeps cache
        uses: actions/cache@v4.2.4
        id: cygdeps-cache
        with:
          path: .cygdeps
          key: cygdeps-${{ runner.os }}-${{ steps.dep-shas.outputs.mbe_sha }}-${{ steps.dep-shas.outputs.codec2_sha }}-${{ steps.dep-shas.outputs.itpp_sha }}-${{ steps.dep-shas.outputs.rtlsdr_sha }}
          restore-keys: |
            cygdeps-${{ runner.os }}-
          save-always: true

      - name: Show Cygwin versions
        shell: pwsh
        run: C:\\tools\\cygwin\\bin\\bash.exe -lc 'uname -a; cmake --version; gcc --version'

      - name: Prepare deps environment
        shell: pwsh
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'WS="$(cygpath -u "$GITHUB_WORKSPACE")"; cd "$WS"; DEPS_PREFIX="$WS/.cygdeps"; echo "DEPS_PREFIX=$DEPS_PREFIX" >> "$GITHUB_ENV"; echo "CMAKE_PREFIX_PATH=$DEPS_PREFIX:${CMAKE_PREFIX_PATH:-}" >> "$GITHUB_ENV"; echo "PKG_CONFIG_PATH=$DEPS_PREFIX/lib/pkgconfig:$DEPS_PREFIX/lib64/pkgconfig:${PKG_CONFIG_PATH:-}" >> "$GITHUB_ENV"; echo "PATH=$DEPS_PREFIX/bin:${PATH}" >> "$GITHUB_ENV"; echo "LD_LIBRARY_PATH=$DEPS_PREFIX/bin:$DEPS_PREFIX/lib:$DEPS_PREFIX/lib64:${LD_LIBRARY_PATH:-}" >> "$GITHUB_ENV"'

      - name: Decide deps to build (manifest)
        id: dep-plan
        shell: pwsh
        env:
          MBE_SHA: ${{ steps.dep-shas.outputs.mbe_sha }}
          CODEC2_SHA: ${{ steps.dep-shas.outputs.codec2_sha }}
          ITPP_SHA: ${{ steps.dep-shas.outputs.itpp_sha }}
          RTLSDR_SHA: ${{ steps.dep-shas.outputs.rtlsdr_sha }}
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc '
          set -euo pipefail
          WS="$(cygpath -u "$GITHUB_WORKSPACE")"; cd "$WS"
          : "${DEPS_PREFIX:?DEPS_PREFIX not set}"
          mf="$DEPS_PREFIX/.manifest"
          test -f "$mf" || true
          # Read manifest values if present
          man_mbe=$(sed -n "s/^mbe_sha=//p" "$mf" 2>/dev/null || true)
          man_codec2=$(sed -n "s/^codec2_sha=//p" "$mf" 2>/dev/null || true)
          man_itpp=$(sed -n "s/^itpp_sha=//p" "$mf" 2>/dev/null || true)
          man_rtlsdr=$(sed -n "s/^rtlsdr_sha=//p" "$mf" 2>/dev/null || true)
          has_pc() { name="$1"; [ -f "$DEPS_PREFIX/lib/pkgconfig/$name.pc" ] || [ -f "$DEPS_PREFIX/lib64/pkgconfig/$name.pc" ]; }
          inst_mbe=false; has_pc libmbe-neo && inst_mbe=true || true
          inst_codec2=false; has_pc codec2 && inst_codec2=true || true
          inst_itpp=false; has_pc itpp && inst_itpp=true || true
          inst_rtlsdr=false; has_pc librtlsdr && inst_rtlsdr=true || true
          m_ok=false; c2_ok=false; i_ok=false; r_ok=false
          [ "$inst_mbe" = true ] && [ -n "$man_mbe" ] && [ "$man_mbe" = "$MBE_SHA" ] && m_ok=true || true
          [ "$inst_codec2" = true ] && [ -n "$man_codec2" ] && [ "$man_codec2" = "$CODEC2_SHA" ] && c2_ok=true || true
          [ "$inst_itpp" = true ] && [ -n "$man_itpp" ] && [ "$man_itpp" = "$ITPP_SHA" ] && i_ok=true || true
          [ "$inst_rtlsdr" = true ] && [ -n "$man_rtlsdr" ] && [ "$man_rtlsdr" = "$RTLSDR_SHA" ] && r_ok=true || true
          build_mbe=true;  [ "$m_ok" = true ]  && build_mbe=false || true
          build_codec2=true; [ "$c2_ok" = true ] && build_codec2=false || true
          build_itpp=true; [ "$i_ok" = true ] && build_itpp=false || true
          build_rtlsdr=true; [ "$r_ok" = true ] && build_rtlsdr=false || true
          echo "build_mbe=$build_mbe"       >> "$GITHUB_OUTPUT"
          echo "build_codec2=$build_codec2" >> "$GITHUB_OUTPUT"
          echo "build_itpp=$build_itpp"     >> "$GITHUB_OUTPUT"
          echo "build_rtlsdr=$build_rtlsdr" >> "$GITHUB_OUTPUT"
          echo "Plan: mbe=$build_mbe codec2=$build_codec2 itpp=$build_itpp rtlsdr=$build_rtlsdr"
          '

      - name: Download mbelib-neo source (tarball)
        shell: pwsh
        if: steps.cygdeps-cache.outputs.cache-hit != 'true' && steps.dep-plan.outputs.build_mbe == 'true'
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'cd "$(cygpath -u "$GITHUB_WORKSPACE")"; curl -L -o mbelib-neo.tar.gz https://github.com/arancormonk/mbelib-neo/archive/refs/heads/main.tar.gz && ls -l mbelib-neo.tar.gz'

      - name: Build mbe-neo (static or shared)
        shell: pwsh
        if: steps.cygdeps-cache.outputs.cache-hit != 'true' && steps.dep-plan.outputs.build_mbe == 'true'
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -euo pipefail; WS="$(cygpath -u "$GITHUB_WORKSPACE")"; cd "$WS"; if [ ! -f "$DEPS_PREFIX/lib/pkgconfig/libmbe-neo.pc" ] && [ ! -f "$DEPS_PREFIX/lib64/pkgconfig/libmbe-neo.pc" ]; then echo "Extracting mbelib-neo.tar.gz in $WS"; tar -xzf mbelib-neo.tar.gz || true; D="mbelib-neo-main"; if [ ! -d "$D/src/ambe" ]; then echo "Tarball extract missing expected tree; falling back to git clone"; rm -rf "$D" mbelib-neo || true; git clone --depth 1 https://github.com/arancormonk/mbelib-neo.git mbelib-neo; D="mbelib-neo"; fi; echo "Using source dir: $D"; test -d "$D/src/ambe" && ls -la "$D/src/ambe" || true; cmake -S "$D" -B "$D/build" -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$DEPS_PREFIX" -DMBELIB_BUILD_TESTS=OFF -DMBELIB_BUILD_EXAMPLES=OFF; cmake --build "$D/build" -j; cmake --install "$D/build"; else echo "Using cached mbelib-neo in $DEPS_PREFIX"; fi'

      - name: Download codec2 source (tarball)
        shell: pwsh
        if: steps.cygdeps-cache.outputs.cache-hit != 'true' && steps.dep-plan.outputs.build_codec2 == 'true'
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'cd "$(cygpath -u "$GITHUB_WORKSPACE")"; curl -L -o codec2.tar.gz https://github.com/arancormonk/codec2/archive/refs/heads/main.tar.gz && ls -l codec2.tar.gz'

      - name: Build codec2
        shell: pwsh
        if: steps.cygdeps-cache.outputs.cache-hit != 'true' && steps.dep-plan.outputs.build_codec2 == 'true'
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -euo pipefail; WS="$(cygpath -u "$GITHUB_WORKSPACE")"; cd "$WS"; if [ ! -f "$DEPS_PREFIX/lib/pkgconfig/codec2.pc" ] && [ ! -f "$DEPS_PREFIX/lib64/pkgconfig/codec2.pc" ]; then echo "Extracting codec2.tar.gz in $WS"; tar -xzf codec2.tar.gz; D="codec2-main"; if [ ! -d "$D/src" ]; then echo "Tarball extract missing expected tree; falling back to git clone"; rm -rf "$D" codec2 || true; git clone --depth 1 https://github.com/arancormonk/codec2.git codec2; D="codec2"; fi; echo "Using source dir: $D"; cmake -S "$D" -B "$D/build" -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$DEPS_PREFIX" -DBUILD_SHARED_LIBS=ON -DUNITTEST=OFF; cmake --build "$D/build" -j; cmake --install "$D/build"; else echo "Using cached codec2 in $DEPS_PREFIX"; fi'

      - name: Download rtl-sdr source (tarball)
        shell: pwsh
        if: steps.cygdeps-cache.outputs.cache-hit != 'true' && steps.dep-plan.outputs.build_rtlsdr == 'true'
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'cd "$(cygpath -u "$GITHUB_WORKSPACE")"; curl -L -o rtl-sdr.tar.gz https://github.com/arancormonk/rtl-sdr/archive/refs/heads/master.tar.gz && ls -l rtl-sdr.tar.gz'

      - name: Build rtl-sdr
        shell: pwsh
        if: steps.cygdeps-cache.outputs.cache-hit != 'true' && steps.dep-plan.outputs.build_rtlsdr == 'true'
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -euo pipefail; WS="$(cygpath -u "$GITHUB_WORKSPACE")"; cd "$WS"; if [ ! -f "$DEPS_PREFIX/lib/pkgconfig/librtlsdr.pc" ] && [ ! -f "$DEPS_PREFIX/lib64/pkgconfig/librtlsdr.pc" ]; then echo "Extracting rtl-sdr.tar.gz in $WS"; tar -xzf rtl-sdr.tar.gz; D="rtl-sdr-master"; if [ ! -d "$D/src" ]; then echo "Tarball extract missing expected tree; falling back to git clone"; rm -rf "$D" rtl-sdr || true; git clone --depth 1 https://github.com/arancormonk/rtl-sdr.git rtl-sdr; D="rtl-sdr"; fi; echo "Using source dir: $D"; # Patch link order on Cygwin: ensure convenience_static pulls in rtlsdr
          if ! grep -q "target_link_libraries(\s*convenience_static\s\+rtlsdr" "$D/src/CMakeLists.txt"; then echo "target_link_libraries(convenience_static rtlsdr)" >> "$D/src/CMakeLists.txt"; fi; 
          cmake -S "$D" -B "$D/build" -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$DEPS_PREFIX" -DINSTALL_UDEV_RULES=OFF; cmake --build "$D/build" -j; cmake --install "$D/build"; else echo "Using cached rtl-sdr in $DEPS_PREFIX"; fi'

      - name: Download itpp source (tarball)
        shell: pwsh
        if: steps.cygdeps-cache.outputs.cache-hit != 'true' && steps.dep-plan.outputs.build_itpp == 'true'
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'cd "$(cygpath -u "$GITHUB_WORKSPACE")"; curl -L -o itpp.tar.gz https://github.com/arancormonk/itpp/archive/refs/heads/develop.tar.gz && ls -l itpp.tar.gz'

      - name: Build itpp
        shell: pwsh
        if: steps.cygdeps-cache.outputs.cache-hit != 'true' && steps.dep-plan.outputs.build_itpp == 'true'
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -euo pipefail; WS="$(cygpath -u "$GITHUB_WORKSPACE")"; cd "$WS"; if [ ! -f "$DEPS_PREFIX/lib/pkgconfig/itpp.pc" ] && [ ! -f "$DEPS_PREFIX/lib64/pkgconfig/itpp.pc" ]; then echo "Extracting itpp.tar.gz in $WS"; tar -xzf itpp.tar.gz; D="itpp-develop"; if [ ! -d "$D/itpp" ]; then echo "Tarball extract missing expected tree; falling back to git clone"; rm -rf "$D" itpp || true; git clone --depth 1 https://github.com/arancormonk/itpp.git itpp; D="itpp"; fi; echo "Using source dir: $D"; cmake -S "$D" -B "$D/build" -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$DEPS_PREFIX" -DITPP_SHARED_LIB=ON -DHTML_DOCS=OFF; cmake --build "$D/build" -j; cmake --install "$D/build"; else echo "Using cached itpp in $DEPS_PREFIX"; fi'

      - name: Update cygdeps manifest
        shell: pwsh
        env:
          MBE_SHA: ${{ steps.dep-shas.outputs.mbe_sha }}
          CODEC2_SHA: ${{ steps.dep-shas.outputs.codec2_sha }}
          ITPP_SHA: ${{ steps.dep-shas.outputs.itpp_sha }}
          RTLSDR_SHA: ${{ steps.dep-shas.outputs.rtlsdr_sha }}
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -e; : "${DEPS_PREFIX:?}"; mkdir -p "$DEPS_PREFIX"; {
            echo "mbe_sha=$MBE_SHA";
            echo "codec2_sha=$CODEC2_SHA";
            echo "itpp_sha=$ITPP_SHA";
            echo "rtlsdr_sha=$RTLSDR_SHA";
            echo "updated=$(date -u +%FT%TZ)";
          } > "$DEPS_PREFIX/.manifest"; echo "Wrote $DEPS_PREFIX/.manifest"'

      - name: Configure (Release)
        shell: pwsh
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'cd "$(cygpath -u "$GITHUB_WORKSPACE")" && cmake --preset dev-release -DDSD_ENABLE_LTO=OFF'

      - name: Build
        shell: pwsh
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'cd "$(cygpath -u "$GITHUB_WORKSPACE")" && cmake --build --preset dev-release -j'

      - name: Stage portable tree
        id: stage
        shell: pwsh
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'cd "$(cygpath -u "$GITHUB_WORKSPACE")"; EXE="build/dev-release/apps/dsd-cli/dsd-neo.exe"; test -f "$EXE"; STAGE="dist/dsd-neo-cygwin"; mkdir -p "$STAGE/bin" "$STAGE/etc"; cp -f "$EXE" "$STAGE/bin/"; cygcheck -v "$EXE" | sed -n "s/^ *\([A-Za-z]:\\\\[^ ]*\.dll\).*/\1/p" | sort -u > dlls.txt || true; while IFS= read -r f; do if [ -f "$f" ]; then cp -n "$f" "$STAGE/bin/" || true; fi; done < dlls.txt; PULSEAUDIO_BIN="$(command -v pulseaudio || true)"; if [ -n "$PULSEAUDIO_BIN" ]; then cp -f "$PULSEAUDIO_BIN" "$STAGE/bin/"; cygcheck -v "$PULSEAUDIO_BIN" | sed -n "s/^ *\([A-Za-z]:\\\\[^ ]*\.dll\).*/\1/p" | sort -u > padlls.txt || true; while IFS= read -r f; do if [ -f "$f" ]; then cp -n "$f" "$STAGE/bin/" || true; fi; done < padlls.txt; fi; MINTTY_BIN="$(command -v mintty || true)"; if [ -n "$MINTTY_BIN" ]; then cp -f "$MINTTY_BIN" "$STAGE/bin/"; cygcheck -v "$MINTTY_BIN" | sed -n "s/^ *\([A-Za-z]:\\\\[^ ]*\.dll\).*/\1/p" | sort -u > mtdlls.txt || true; while IFS= read -r f; do if [ -f "$f" ]; then cp -n "$f" "$STAGE/bin/" || true; fi; done < mtdlls.txt; fi; cp -f packaging/windows-cygwin/run-dsd-neo.bat "$STAGE/"; cp -f packaging/windows-cygwin/run-dsd-neo-mintty.bat "$STAGE/" 2>/dev/null || true; cp -f packaging/windows-cygwin/README-windows.txt "$STAGE/"; if [ -f packaging/windows-cygwin/etc/pulse/default.pa ]; then mkdir -p "$STAGE/etc/pulse"; cp -f packaging/windows-cygwin/etc/pulse/default.pa "$STAGE/etc/pulse/"; fi'

      - name: Archive ZIP
        shell: pwsh
        env:
          REF_TYPE: ${{ github.ref_type }}
          REF_NAME: ${{ github.ref_name }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          $stage = 'dist/dsd-neo-cygwin'
          $defaultZip = "$stage.zip"
          if ($env:REF_TYPE -eq 'tag' -and $env:REF_NAME) {
            $zip = "dist/dsd-neo-cygwin-$($env:REF_NAME).zip"
            $artName = "dsd-neo-cygwin-portable-$($env:REF_NAME)"
          } else {
            $short = if ($env:GITHUB_SHA) { $env:GITHUB_SHA.Substring(0,7) } else { "dev" }
            $zip = "dist/dsd-neo-cygwin-$short.zip"
            $artName = "dsd-neo-cygwin-portable-$short"
          }
          $zipDir = Split-Path -Parent $zip
          if ($zipDir -and !(Test-Path $zipDir)) { New-Item -Type Directory -Force -Path $zipDir | Out-Null }
          if (Test-Path $zip) { Remove-Item -Force $zip }
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::CreateFromDirectory($stage, $zip)
          Write-Host "Created: $zip"
          echo "ZIP_PATH=$zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "ART_NAME=$artName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        id: zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ steps.zip.outputs.ART_NAME }}
          path: ${{ steps.zip.outputs.ZIP_PATH }}

      - name: Upload release asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.zip.outputs.ZIP_PATH }}
          name: dsd-neo portable (Cygwin) ${{ github.ref_name }}
          generate_release_notes: true
