name: windows-ci

on:
  workflow_dispatch: {}
  push:
    branches: [main, master]
    paths-ignore:
      - ".github/*.yml"
      - ".github/*.yaml"
      - ".github/**/*.yml"
      - ".github/**/*.yaml"
      - "**/*.md"

jobs:
  build-portable-zip:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Gate on Linux CI success (linux-ci.yaml) [disabled]
        if: ${{ false }}
        uses: actions/github-script@v8
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const sha = context.sha;
            // Check latest run of the Linux CI workflow for this commit
            const res = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: 'linux-ci.yaml',
              head_sha: sha,
              per_page: 1
            });
            const run = res.data.workflow_runs[0];
            if (!run) {
              core.setFailed(`No Linux CI (linux-ci.yaml) run found for commit ${sha}.`);
            } else if (run.status !== 'completed' || run.conclusion !== 'success') {
              core.setFailed(`Linux CI (linux-ci.yaml) not successful for ${sha}. status=${run.status} conclusion=${run.conclusion}`);
            } else {
              core.info(`Linux CI passed: ${run.html_url}`);
            }

      - name: Compute dependency SHAs
        id: dep-shas
        shell: pwsh
        run: |
          $mbe = (git ls-remote https://github.com/arancormonk/mbelib-neo HEAD).Split("`t")[0]
          $codec2 = (git ls-remote https://github.com/arancormonk/codec2 HEAD).Split("`t")[0]
          $itpp = (git ls-remote https://github.com/arancormonk/itpp HEAD).Split("`t")[0]
          $rtlsdr = (git ls-remote https://github.com/arancormonk/rtl-sdr HEAD).Split("`t")[0]
          "mbe_sha=$mbe" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "codec2_sha=$codec2" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "itpp_sha=$itpp" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "rtlsdr_sha=$rtlsdr" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Setup Cygwin
        uses: egor-tensin/setup-cygwin@v4.0.1
        with:
          packages: >-
            git
            gcc-g++
            make
            cmake
            curl
            ninja
            pkg-config
            libsndfile-devel
            libncurses-devel
            libpulse-devel
            pulseaudio
            pulseaudio-utils
            libusb1.0-devel
            mintty

      - name: Mark repo safe for Cygwin git
        shell: pwsh
        run: C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -o igncr; git config --global --add safe.directory "$(cygpath -u "$GITHUB_WORKSPACE")"'

      - name: Restore cygdeps cache
        uses: actions/cache@v4.3.0
        id: cygdeps-cache
        with:
          path: .cygdeps
          key: cygdeps-${{ runner.os }}-${{ steps.dep-shas.outputs.mbe_sha }}-${{ steps.dep-shas.outputs.codec2_sha }}-${{ steps.dep-shas.outputs.itpp_sha }}-${{ steps.dep-shas.outputs.rtlsdr_sha }}
          restore-keys: |
            cygdeps-${{ runner.os }}-

      - name: Show Cygwin versions
        shell: pwsh
        run: C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -o igncr; uname -a; cmake --version; gcc --version'

      - name: Prepare deps environment
        shell: pwsh
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -o igncr; WS="$(cygpath -u "$GITHUB_WORKSPACE")"; cd "$WS"; DEPS_PREFIX="$WS/.cygdeps"; echo "DEPS_PREFIX=$DEPS_PREFIX" >> "$GITHUB_ENV"; echo "CMAKE_PREFIX_PATH=$DEPS_PREFIX:${CMAKE_PREFIX_PATH:-}" >> "$GITHUB_ENV"; echo "PKG_CONFIG_PATH=$DEPS_PREFIX/lib/pkgconfig:$DEPS_PREFIX/lib64/pkgconfig:${PKG_CONFIG_PATH:-}" >> "$GITHUB_ENV"; echo "PATH=$DEPS_PREFIX/bin:${PATH}" >> "$GITHUB_ENV"; echo "LD_LIBRARY_PATH=$DEPS_PREFIX/bin:$DEPS_PREFIX/lib:$DEPS_PREFIX/lib64:${LD_LIBRARY_PATH:-}" >> "$GITHUB_ENV"'

      - name: Decide deps to build (manifest)
        id: dep-plan
        shell: pwsh
        env:
          MBE_SHA: ${{ steps.dep-shas.outputs.mbe_sha }}
          CODEC2_SHA: ${{ steps.dep-shas.outputs.codec2_sha }}
          ITPP_SHA: ${{ steps.dep-shas.outputs.itpp_sha }}
          RTLSDR_SHA: ${{ steps.dep-shas.outputs.rtlsdr_sha }}
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -o igncr; set -euo pipefail; WS="$(cygpath -u "$GITHUB_WORKSPACE")"; cd "$WS"; : "${DEPS_PREFIX:?DEPS_PREFIX not set}"; mf="$DEPS_PREFIX/.manifest"; man_mbe=$(sed -n "s/^mbe_sha=//p" "$mf" 2>/dev/null || true); man_codec2=$(sed -n "s/^codec2_sha=//p" "$mf" 2>/dev/null || true); man_itpp=$(sed -n "s/^itpp_sha=//p" "$mf" 2>/dev/null || true); man_rtlsdr=$(sed -n "s/^rtlsdr_sha=//p" "$mf" 2>/dev/null || true); inst_mbe=false; if [ -f "$DEPS_PREFIX/lib/pkgconfig/libmbe-neo.pc" ] || [ -f "$DEPS_PREFIX/lib64/pkgconfig/libmbe-neo.pc" ]; then inst_mbe=true; fi; inst_codec2=false; if [ -f "$DEPS_PREFIX/lib/pkgconfig/codec2.pc" ] || [ -f "$DEPS_PREFIX/lib64/pkgconfig/codec2.pc" ]; then inst_codec2=true; fi; inst_itpp=false; if [ -f "$DEPS_PREFIX/lib/pkgconfig/itpp.pc" ] || [ -f "$DEPS_PREFIX/lib64/pkgconfig/itpp.pc" ]; then inst_itpp=true; fi; inst_rtlsdr=false; if [ -f "$DEPS_PREFIX/lib/pkgconfig/librtlsdr.pc" ] || [ -f "$DEPS_PREFIX/lib64/pkgconfig/librtlsdr.pc" ]; then inst_rtlsdr=true; fi; m_ok=false; c2_ok=false; i_ok=false; r_ok=false; [ "$inst_mbe" = true ] && [ -n "$man_mbe" ] && [ "$man_mbe" = "$MBE_SHA" ] && m_ok=true || true; [ "$inst_codec2" = true ] && [ -n "$man_codec2" ] && [ "$man_codec2" = "$CODEC2_SHA" ] && c2_ok=true || true; [ "$inst_itpp" = true ] && [ -n "$man_itpp" ] && [ "$man_itpp" = "$ITPP_SHA" ] && i_ok=true || true; [ "$inst_rtlsdr" = true ] && [ -n "$man_rtlsdr" ] && [ "$man_rtlsdr" = "$RTLSDR_SHA" ] && r_ok=true || true; build_mbe=true; [ "$m_ok" = true ] && build_mbe=false || true; build_codec2=true; [ "$c2_ok" = true ] && build_codec2=false || true; build_itpp=true; [ "$i_ok" = true ] && build_itpp=false || true; build_rtlsdr=true; [ "$r_ok" = true ] && build_rtlsdr=false || true; echo "build_mbe=$build_mbe" >> "$GITHUB_OUTPUT"; echo "build_codec2=$build_codec2" >> "$GITHUB_OUTPUT"; echo "build_itpp=$build_itpp" >> "$GITHUB_OUTPUT"; echo "build_rtlsdr=$build_rtlsdr" >> "$GITHUB_OUTPUT"; echo "Plan: mbe=$build_mbe codec2=$build_codec2 itpp=$build_itpp rtlsdr=$build_rtlsdr"'

      - name: Download mbelib-neo source (tarball)
        shell: pwsh
        if: steps.cygdeps-cache.outputs.cache-hit != 'true' && steps.dep-plan.outputs.build_mbe == 'true'
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -o igncr; cd "$(cygpath -u "$GITHUB_WORKSPACE")"; curl -L -o mbelib-neo.tar.gz https://github.com/arancormonk/mbelib-neo/archive/refs/heads/main.tar.gz && ls -l mbelib-neo.tar.gz'

      - name: Build mbe-neo (static or shared)
        shell: pwsh
        if: steps.cygdeps-cache.outputs.cache-hit != 'true' && steps.dep-plan.outputs.build_mbe == 'true'
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -o igncr; set -euo pipefail; WS="$(cygpath -u "$GITHUB_WORKSPACE")"; cd "$WS"; if [ ! -f "$DEPS_PREFIX/lib/pkgconfig/libmbe-neo.pc" ] && [ ! -f "$DEPS_PREFIX/lib64/pkgconfig/libmbe-neo.pc" ]; then echo "Extracting mbelib-neo.tar.gz in $WS"; tar -xzf mbelib-neo.tar.gz || true; D="mbelib-neo-main"; if [ ! -d "$D/src/ambe" ]; then echo "Tarball extract missing expected tree; falling back to git clone"; rm -rf "$D" mbelib-neo || true; git clone --depth 1 https://github.com/arancormonk/mbelib-neo.git mbelib-neo; D="mbelib-neo"; fi; echo "Using source dir: $D"; test -d "$D/src/ambe" && ls -la "$D/src/ambe" || true; cmake -S "$D" -B "$D/build" -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$DEPS_PREFIX" -DMBELIB_BUILD_TESTS=OFF -DMBELIB_BUILD_EXAMPLES=OFF -DBUILD_SHARED_LIBS=OFF; cmake --build "$D/build" -j; cmake --install "$D/build"; else echo "Using cached mbelib-neo in $DEPS_PREFIX"; fi'

      - name: Download codec2 source (tarball)
        shell: pwsh
        if: steps.cygdeps-cache.outputs.cache-hit != 'true' && steps.dep-plan.outputs.build_codec2 == 'true'
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -o igncr; cd "$(cygpath -u "$GITHUB_WORKSPACE")"; curl -L -o codec2.tar.gz https://github.com/arancormonk/codec2/archive/refs/heads/main.tar.gz && ls -l codec2.tar.gz'

      - name: Build codec2
        shell: pwsh
        if: steps.cygdeps-cache.outputs.cache-hit != 'true' && steps.dep-plan.outputs.build_codec2 == 'true'
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -o igncr; set -euo pipefail; WS="$(cygpath -u "$GITHUB_WORKSPACE")"; cd "$WS"; if [ ! -f "$DEPS_PREFIX/lib/pkgconfig/codec2.pc" ] && [ ! -f "$DEPS_PREFIX/lib64/pkgconfig/codec2.pc" ]; then echo "Extracting codec2.tar.gz in $WS"; tar -xzf codec2.tar.gz; D="codec2-main"; if [ ! -d "$D/src" ]; then echo "Tarball extract missing expected tree; falling back to git clone"; rm -rf "$D" codec2 || true; git clone --depth 1 https://github.com/arancormonk/codec2.git codec2; D="codec2"; fi; echo "Using source dir: $D"; cmake -S "$D" -B "$D/build" -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$DEPS_PREFIX" -DBUILD_SHARED_LIBS=ON -DUNITTEST=OFF; cmake --build "$D/build" -j; cmake --install "$D/build"; else echo "Using cached codec2 in $DEPS_PREFIX"; fi'

      - name: Download rtl-sdr source (tarball)
        shell: pwsh
        if: steps.cygdeps-cache.outputs.cache-hit != 'true' && steps.dep-plan.outputs.build_rtlsdr == 'true'
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -o igncr; cd "$(cygpath -u "$GITHUB_WORKSPACE")"; curl -L -o rtl-sdr.tar.gz https://github.com/arancormonk/rtl-sdr/archive/refs/heads/master.tar.gz && ls -l rtl-sdr.tar.gz'

      - name: Build rtl-sdr
        shell: pwsh
        if: steps.cygdeps-cache.outputs.cache-hit != 'true' && steps.dep-plan.outputs.build_rtlsdr == 'true'
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -o igncr; set -euo pipefail; WS="$(cygpath -u "$GITHUB_WORKSPACE")"; cd "$WS"; if [ ! -f "$DEPS_PREFIX/lib/pkgconfig/librtlsdr.pc" ] && [ ! -f "$DEPS_PREFIX/lib64/pkgconfig/librtlsdr.pc" ]; then echo "Extracting rtl-sdr.tar.gz in $WS"; tar -xzf rtl-sdr.tar.gz; D="rtl-sdr-master"; if [ ! -d "$D/src" ]; then echo "Tarball extract missing expected tree; falling back to git clone"; rm -rf "$D" rtl-sdr || true; git clone --depth 1 https://github.com/arancormonk/rtl-sdr.git rtl-sdr; D="rtl-sdr"; fi; echo "Using source dir: $D"; if ! grep -q "target_link_libraries(\s*convenience_static\s\+rtlsdr" "$D/src/CMakeLists.txt"; then echo "target_link_libraries(convenience_static rtlsdr)" >> "$D/src/CMakeLists.txt"; fi; cmake -S "$D" -B "$D/build" -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$DEPS_PREFIX" -DINSTALL_UDEV_RULES=OFF; cmake --build "$D/build" -j; cmake --install "$D/build"; else echo "Using cached rtl-sdr in $DEPS_PREFIX"; fi'

      - name: Download itpp source (tarball)
        shell: pwsh
        if: steps.cygdeps-cache.outputs.cache-hit != 'true' && steps.dep-plan.outputs.build_itpp == 'true'
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -o igncr; cd "$(cygpath -u "$GITHUB_WORKSPACE")"; curl -L -o itpp.tar.gz https://github.com/arancormonk/itpp/archive/refs/heads/develop.tar.gz && ls -l itpp.tar.gz'

      - name: Build itpp
        shell: pwsh
        if: steps.cygdeps-cache.outputs.cache-hit != 'true' && steps.dep-plan.outputs.build_itpp == 'true'
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -o igncr; set -euo pipefail; WS="$(cygpath -u "$GITHUB_WORKSPACE")"; cd "$WS"; if [ ! -f "$DEPS_PREFIX/lib/pkgconfig/itpp.pc" ] && [ ! -f "$DEPS_PREFIX/lib64/pkgconfig/itpp.pc" ]; then echo "Extracting itpp.tar.gz in $WS"; tar -xzf itpp.tar.gz; D="itpp-develop"; if [ ! -d "$D/itpp" ]; then echo "Tarball extract missing expected tree; falling back to git clone"; rm -rf "$D" itpp || true; git clone --depth 1 https://github.com/arancormonk/itpp.git itpp; D="itpp"; fi; echo "Using source dir: $D"; mkdir -p "$D/build"; cmake -S "$D" -B "$D/build" -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$DEPS_PREFIX" -DITPP_SHARED_LIB=ON -DHTML_DOCS=OFF -DDOXYGEN_EXECUTABLE=/bin/false; cmake --build "$D/build" -j; cmake --install "$D/build"; else echo "Using cached itpp in $DEPS_PREFIX"; fi'

      - name: Update cygdeps manifest
        shell: pwsh
        env:
          MBE_SHA: ${{ steps.dep-shas.outputs.mbe_sha }}
          CODEC2_SHA: ${{ steps.dep-shas.outputs.codec2_sha }}
          ITPP_SHA: ${{ steps.dep-shas.outputs.itpp_sha }}
          RTLSDR_SHA: ${{ steps.dep-shas.outputs.rtlsdr_sha }}
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -o igncr; set -e; : "${DEPS_PREFIX:?}"; mkdir -p "$DEPS_PREFIX"; mf="$DEPS_PREFIX/.manifest"; : > "$mf"; echo "mbe_sha=$MBE_SHA" >> "$mf"; echo "codec2_sha=$CODEC2_SHA" >> "$mf"; echo "itpp_sha=$ITPP_SHA" >> "$mf"; echo "rtlsdr_sha=$RTLSDR_SHA" >> "$mf"; echo "updated=$(date -u +%FT%TZ)" >> "$mf"; echo "Wrote $mf"'

      - name: Save cygdeps cache (explicit)
        if: steps.cygdeps-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4.3.0
        with:
          path: .cygdeps
          key: cygdeps-${{ runner.os }}-${{ steps.dep-shas.outputs.mbe_sha }}-${{ steps.dep-shas.outputs.codec2_sha }}-${{ steps.dep-shas.outputs.itpp_sha }}-${{ steps.dep-shas.outputs.rtlsdr_sha }}

      - name: Configure (Release)
        shell: pwsh
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -o igncr; cd "$(cygpath -u "$GITHUB_WORKSPACE")" && cmake --preset dev-release -G Ninja -DDSD_ENABLE_LTO=OFF -DBUILD_TESTING=OFF'

      - name: Build
        shell: pwsh
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -o igncr; cd "$(cygpath -u "$GITHUB_WORKSPACE")" && cmake --build --preset dev-release -j'

      - name: Smoke test - show CLI help
        shell: pwsh
        run: |
          C:\\tools\\cygwin\\bin\\bash.exe -lc 'set -o igncr; cd "$(cygpath -u "$GITHUB_WORKSPACE")" && ./build/dev-release/apps/dsd-cli/dsd-neo.exe -h || true'

      - name: Stage portable tree
        id: stage
        # Run script via Cygwin bash with CRLF ignoring enabled
        # Convert the runner temp script path to a POSIX path before sourcing to avoid backslash escaping issues
        shell: 'C:\\tools\\cygwin\\bin\\bash.exe --noprofile --norc -lc "set -o igncr; __f=$(cygpath -u ''{0}''); source \"$__f\""'
        run: |
          # Be robust if pipefail isn't available (should be in bash)
          set -euo pipefail 2>/dev/null || set -eu
          # Avoid glob failures when no matches (used below)
          shopt -s nullglob
          cd "$(cygpath -u "$GITHUB_WORKSPACE")"

          EXE="build/dev-release/apps/dsd-cli/dsd-neo.exe"
          test -f "$EXE"

          STAGE="dist/dsd-neo-cygwin"
          mkdir -p "$STAGE/bin" "$STAGE/etc"
          cp -f "$EXE" "$STAGE/bin/"

          : "${DEPS_PREFIX:?DEPS_PREFIX not set}"

          # Helper: collect DLL dependencies of the given files and copy them into $STAGE/bin
          # Use robust parsing of cygcheck output to grab actual file paths.
          collect_deps() {
            local out dll file fn name cand
            out="$1"; shift
            : > "$out"
            for file in "$@"; do
              [ -f "$file" ] || continue
              /usr/bin/cygcheck -v "$file" 2>/dev/null | /usr/bin/tr -d '\r' | \
                /usr/bin/grep -iE -o '([A-Za-z]:\\\\[^ ]*|/[^ ]*)\\.dll' >> "$out" || true
              # Also try ldd as a secondary source (formats differ)
              /usr/bin/ldd "$file" 2>/dev/null | /usr/bin/tr -d '\r' | \
                /usr/bin/grep -iE -o '([A-Za-z]:\\\\[^ ]*|/[^ ]*)\\.dll' >> "$out" || true
              # Fallback: ask objdump for DLL names and resolve from known locations
              while IFS= read -r name; do
                for cand in \
                  "/bin/$name" \
                  "/usr/bin/$name" \
                  "$DEPS_PREFIX/bin/$name"; do
                  [ -f "$cand" ] && echo "$cand" >> "$out" && break || true
                done
              done < <(/usr/bin/objdump -p "$file" 2>/dev/null | /usr/bin/sed -n 's/^\tDLL Name: \(.*\.dll\)$/\1/p')
            done
            sort -u -o "$out" "$out" || true
            while IFS= read -r dll; do
              [ -z "$dll" ] && continue
              fn=$(cygpath -u "$dll" 2>/dev/null || echo "$dll")
              # Skip Windows system DLLs; copy Cygwin and third-party only
              if echo "$fn" | /usr/bin/grep -qiE '^/cygdrive/[a-z]/windows/'; then
                continue
              fi
              if [ -f "$fn" ]; then
                cp -n "$fn" "$STAGE/bin/" 2>/dev/null || true
              fi
            done < "$out"
          }

          # Rely on closure (below) to harvest all required DLLs.

          # Optional tools: include exe and their DLLs if present
          if command -v pulseaudio >/dev/null 2>&1; then
            PULSEAUDIO_BIN="$(command -v pulseaudio)"
            cp -f "$PULSEAUDIO_BIN" "$STAGE/bin/"
          fi

          if command -v mintty >/dev/null 2>&1; then
            MINTTY_BIN="$(command -v mintty)"
            cp -f "$MINTTY_BIN" "$STAGE/bin/"
          fi

          # Closure: resolve dependencies until fixed point (cap at 10 passes)
          pass=1
          while true; do
            before=$(printf "%s\n" "$STAGE"/bin/*.exe "$STAGE"/bin/*.dll 2>/dev/null | wc -l | awk '{print $1}')
            collect_deps "pass${pass}.txt" "$STAGE"/bin/*.exe "$STAGE"/bin/*.dll
            after=$(printf "%s\n" "$STAGE"/bin/*.exe "$STAGE"/bin/*.dll 2>/dev/null | wc -l | awk '{print $1}')
            [ "$after" -le "$before" ] && break
            pass=$((pass+1))
            [ "$pass" -gt 10 ] && break
          done

          # Copy launchers and config
          cp -f packaging/windows-cygwin/dsd-neo.bat "$STAGE/"
          cp -f packaging/windows-cygwin/dsd-neo-mintty.bat "$STAGE/" 2>/dev/null || true
          cp -f packaging/windows-cygwin/README-windows.txt "$STAGE/"
          if [ -f packaging/windows-cygwin/etc/pulse/default.pa ]; then
            mkdir -p "$STAGE/etc/pulse"
            cp -f packaging/windows-cygwin/etc/pulse/default.pa "$STAGE/etc/pulse/"
          fi

          # Provide a minimal terminfo set (avoid copying symlinks in full tree)
          if [ -x "/usr/bin/tic" ] && [ -x "/usr/bin/infocmp" ]; then
            mkdir -p "$STAGE/share/terminfo"
            tmp_src=$(mktemp)
            # Common terminals for Windows/mintty/console
            for ent in xterm xterm-256color vt100 vt220 screen cygwin; do
              /usr/bin/infocmp -x -A /usr/share/terminfo "$ent" >> "$tmp_src" 2>/dev/null || true
              echo >> "$tmp_src"
            done
            if [ -s "$tmp_src" ]; then
              /usr/bin/tic -x -o "$STAGE/share/terminfo" "$tmp_src" || true
              # Dereference any symlinks created for aliases (e.g., vt100-am)
              # .NET ZipFile chokes on reparse points; replace links with plain files
              if [ -d "$STAGE/share/terminfo" ]; then
                /usr/bin/find "$STAGE/share/terminfo" -type l -print0 | \
                  while IFS= read -r -d '' link; do
                    tgt=$(/usr/bin/readlink -f "$link" 2>/dev/null || true)
                    if [ -n "$tgt" ] && [ -f "$tgt" ]; then
                      rm -f "$link" || true
                      cp -f "$tgt" "$link" || true
                    fi
                  done
              fi
            fi
            rm -f "$tmp_src"
          fi

          # Emit a manifest of included DLLs for debugging/auditing
          (cd "$STAGE/bin" && ls -1 *.dll 2>/dev/null | sort -f) > "$STAGE/dlls-manifest.txt" || true

      - name: Validate portable dependencies
        shell: 'C:\\tools\\cygwin\\bin\\bash.exe --noprofile --norc -lc "set -o igncr; __f=$(cygpath -u ''{0}''); source \"$__f\""'
        run: |
          set -eu
          STAGE="dist/dsd-neo-cygwin"
          test -f "$STAGE/bin/dsd-neo.exe"
          # Restrict runtime search to staged bin, but call Cygwin tools via absolute paths
          export PATH="$STAGE/bin"
          # Ensure cygcheck reports no missing DLLs for all staged executables
          miss=0
          for exe in "$STAGE"/bin/*.exe; do
            [ -f "$exe" ] || continue
            echo "Validating dependencies for: $exe"
            if /usr/bin/cygcheck -v "$exe" | /usr/bin/grep -E "^  Not Found: " -q; then
              echo "Missing dependencies for $exe:" >&2
              /usr/bin/cygcheck -v "$exe" | /usr/bin/sed -n 's/^  Not Found: //p' >&2 || true
              miss=1
            fi
          done
          if [ "$miss" -ne 0 ]; then
            echo "Validation failed: missing DLLs detected." >&2
            exit 1
          fi

      - name: Smoke test staged binary
        shell: 'C:\\tools\\cygwin\\bin\\bash.exe --noprofile --norc -lc "set -o igncr; __f=$(cygpath -u ''{0}''); source \"$__f\""'
        run: |
          set -eu
          STAGE="dist/dsd-neo-cygwin"
          export PATH="$STAGE/bin:${PATH}"
          "$STAGE/bin/dsd-neo.exe" -h || true

      - name: Archive ZIP
        shell: pwsh
        env:
          REF_TYPE: ${{ github.ref_type }}
          REF_NAME: ${{ github.ref_name }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          $stage = 'dist/dsd-neo-cygwin'
          $defaultZip = "$stage.zip"
          if ($env:REF_TYPE -eq 'tag' -and $env:REF_NAME) {
            $zip = "dist/dsd-neo-cygwin-x86_64-portable-$($env:REF_NAME).zip"
            $artName = "dsd-neo-cygwin-x86_64-portable-$($env:REF_NAME)"
          } else {
            $zip = "dist/dsd-neo-cygwin-x86_64-portable-nightly.zip"
            $artName = "dsd-neo-cygwin-x86_64-portable-nightly"
          }
          $zipDir = Split-Path -Parent $zip
          if ($zipDir -and !(Test-Path $zipDir)) { New-Item -Type Directory -Force -Path $zipDir | Out-Null }
          if (Test-Path $zip) { Remove-Item -Force $zip }
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::CreateFromDirectory($stage, $zip)
          Write-Host "Created: $zip"
          echo "ZIP_PATH=$zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "ART_NAME=$artName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        id: zip

      - name: Verify ZIP contents (extract and run help)
        shell: pwsh
        run: |
          $zip = '${{ steps.zip.outputs.ZIP_PATH }}'
          if (!(Test-Path $zip)) { throw "ZIP not found: $zip" }
          $dest = Join-Path $env:RUNNER_TEMP ('dsd-neo-cygwin-' + [System.Guid]::NewGuid().ToString('N'))
          New-Item -ItemType Directory -Force -Path $dest | Out-Null
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::ExtractToDirectory($zip, $dest)
          $bin = Join-Path $dest 'bin'
          $exe = Join-Path $bin 'dsd-neo.exe'
          if (!(Test-Path $exe)) { throw "Extracted exe not found: $exe" }
          $env:PATH = "$bin;$env:PATH"
          Write-Host "Running: $exe -h"
          & $exe -h

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ steps.zip.outputs.ART_NAME }}
          path: ${{ steps.zip.outputs.ZIP_PATH }}
          retention-days: 7

      - name: Upload release asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2.3.3
        with:
          files: ${{ steps.zip.outputs.ZIP_PATH }}
          name: dsd-neo-cygwin-x86_64-portable-${{ github.ref_name }}
          generate_release_notes: true

      - name: Upload nightly asset (overwrite)
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: nightly
          prerelease: true
          file: ${{ steps.zip.outputs.ZIP_PATH }}
          asset_name: dsd-neo-cygwin-x86_64-portable-nightly.zip
          overwrite: true
